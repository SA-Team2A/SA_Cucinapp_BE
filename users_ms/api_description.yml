swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for User
  description: Javascript + MongoDB
  license:
    name: Cucinapp 2018
host: 192.168.99.102:8080
basePath: /users
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    get:
      summary: Returns all users
      # operationId: getUsers
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/UsersList'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

    post:
      summary: Creates a new user
      # operationId: createUser
      parameters:
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/UserInput'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'


  /users/{id}:
    get:
      summary: Returns the user with the given identifier
      # operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The identifier of the user to be returned
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      summary: Updates the user with the given identifier
      # operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The identifier of the user to be updated
          required: true
          type: string
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/UserInput2'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      summary: Deletes a user with the given identifier
      # operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The identifier of the user to be deleted
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /login:
    post:
      summary: Returns the user_id after check credentials
      operationId: login
      parameters:
        - name: loginInput
          in: body
          required: true
          description: User email and password
          schema:
            $ref: '#/definitions/LoginInput'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/LoginOutput'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
          description: Not Acceptable
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /users/{user_id}/addfollower/{follower_id}:
    get:
      summary: Makes the tracking relationship between users
      # operationId: addFollower
      parameters:
        - name: user_id
          in: path
          description: The followed user identifier
          required: true
          type: string
        - name: follower_id
          in: path
          description: The follower user identifier
          required: true
          type: string
      responses:
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /users/{user_id}/removefollower/{follower_id}:
    get:
      summary: Destroy the tracking relationship between users
      # operationId: removeFollower
      parameters:
        - name: user_id
          in: path
          description: The followed user identifier
          required: true
          type: string
        - name: follower_id
          in: path
          description: The follower user identifier
          required: true
          type: string
      responses:
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

definitions:
  SimpleUser:
    type: object
    required:
      - id
      - username
      - email
      - created_at
      - updated_at
    properties:
      id:
        type: string
      username:
        type: string
      email:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
  User:
    type: object
    required:
      - id
      - username
      - email
      - followers
      - created_at
      - updated_at
    properties:
      id:
        type: string
      username:
        type: string
      email:
        type: string
      followers:
        type: array
        items:
          '#/definitions/SimpleUser'
      created_at:
        type: string
      updated_at:
        type: string

  UserInput:
    type: object
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      # password_confirmation:
      #   type: string

  UserInput2:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      # password_confirmation:
      #   type: string

  UsersList:
    type: array
    items:
      $ref: '#/definitions/User'

  LoginInput:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string



  ErrorModel:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: number
